import os
import time
import base64
import requests
from dotenv import load_dotenv
from openai import OpenAI
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ASSISTANT_ID = os.getenv("ASSISTANT_ID")  # ID –≤–∞—à–µ–≥–æ Assistant

client = OpenAI(api_key=OPENAI_API_KEY)

user_state = {}
user_data = {}
user_threads = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è thread_id –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_state[chat_id] = "AWAIT_NEXT"
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π thread –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    thread = client.beta.threads.create()
    user_threads[chat_id] = thread.id
    
    markup = ReplyKeyboardMarkup([["–î–∞–ª–µ–µ"]], resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É—Ö–æ–¥—É –∑–∞ –¥–æ–º–∞—à–Ω–∏–º –ø–∏—Ç–æ–º—Ü–µ–º.\n"
        "–ü–æ–º–æ–≥—É —Å —É—Ö–æ–¥–æ–º, –¥—Ä–µ—Å—Å–∏—Ä–æ–≤–∫–∞–º–∏, –∏–≥—Ä–∞–º–∏ –∏ –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º.\n"
        "–¢–∞–∫–∂–µ –º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!\n"
        "–ù–∞—á–Ω—ë–º —Å –Ω–µ–±–æ–ª—å—à–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî —Ç–∞–∫ —è —Å–º–æ–≥—É –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–º.",
        reply_markup=markup
    )

async def download_photo(photo_file_id: str, bot_token: str) -> bytes:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ –∏–∑ Telegram –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_info_url = f"https://api.telegram.org/bot{bot_token}/getFile?file_id={photo_file_id}"
        file_info_response = requests.get(file_info_url)
        file_info = file_info_response.json()
        
        if not file_info.get('ok'):
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: {file_info}")
        
        file_path = file_info['result']['file_path']
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        file_url = f"https://api.telegram.org/file/bot{bot_token}/{file_path}"
        file_response = requests.get(file_url)
        
        return file_response.content
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
        raise

async def analyze_photo_with_gpt(image_bytes: bytes, text_prompt: str = "") -> str:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ —Å –ø–æ–º–æ—â—å—é GPT-4 Vision"""
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
        base64_image = base64.b64encode(image_bytes).decode('utf-8')
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞
        system_prompt = """–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —É—Ö–æ–¥—É –∑–∞ –¥–æ–º–∞—à–Ω–∏–º–∏ –∂–∏–≤–æ—Ç–Ω—ã–º–∏. 
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏ –¥–∞–≤–∞–π –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ:
        - –ó–¥–æ—Ä–æ–≤—å—é –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–∏—Ç–æ–º—Ü–∞
        - –£—Ö–æ–¥—É –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
        - –ü–æ–≤–µ–¥–µ–Ω–∏—é
        - –ü–∏—Ç–∞–Ω–∏—é
        - –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        
        –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–º –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–º."""
        
        user_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–∏—Ç–æ–º—Ü–∞. 
        {text_prompt if text_prompt else "–ß—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å? –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É, –∑–¥–æ—Ä–æ–≤—å—é –∏–ª–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–≥–æ, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ."}
        
        –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞:
        1. –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
        2. –£—Å–ª–æ–≤–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è (–µ—Å–ª–∏ –≤–∏–¥–Ω—ã)
        3. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —É—Ö–æ–¥–∞
        """
        
        response = client.chat.completions.create(
            model="gpt-4o",  # –∏–ª–∏ "gpt-4-vision-preview" –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é
            messages=[
                {"role": "system", "content": system_prompt},
                {
                    "role": "user", 
                    "content": [
                        {"type": "text", "text": user_prompt},
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{base64_image}",
                                "detail": "high"
                            }
                        }
                    ]
                }
            ],
            max_tokens=1000,
            temperature=0.7
        )
        
        return response.choices[0].message.content
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ —Å GPT: {e}")
        return f"–ò–∑–≤–∏–Ω–∏, –Ω–µ —Å–º–æ–≥ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ. –û—à–∏–±–∫–∞: {str(e)}"

async def ask_assistant(prompt: str, chat_id: int) -> str:
    try:
        thread_id = user_threads.get(chat_id)
        
        if not thread_id:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π thread –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            thread = client.beta.threads.create()
            user_threads[chat_id] = thread.id
            thread_id = thread.id
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ thread
        client.beta.threads.messages.create(
            thread_id=thread_id,
            role="user",
            content=prompt
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Assistant
        run = client.beta.threads.runs.create(
            thread_id=thread_id,
            assistant_id=ASSISTANT_ID
        )
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        while run.status in ['queued', 'in_progress', 'cancelling']:
            time.sleep(1)
            run = client.beta.threads.runs.retrieve(
                thread_id=thread_id,
                run_id=run.id
            )
        
        if run.status == 'completed':
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ thread
            messages = client.beta.threads.messages.list(
                thread_id=thread_id
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç Assistant
            for message in messages.data:
                if message.role == "assistant":
                    return message.content[0].text.value
        
        elif run.status == 'requires_action':
            # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, function calling)
            return "Assistant —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
        
        else:
            return f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {run.status}"
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Assistant API: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    chat_id = update.effective_chat.id
    state = user_state.get(chat_id)
    
    if state != "DONE":
        await update.message.reply_text(
            "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start"
        )
        return
    
    try:
        await update.message.reply_text("üì∏ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ (–ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
        photo = update.message.photo[-1]
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ
        image_bytes = await download_photo(photo.file_id, BOT_TOKEN)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
        caption = update.message.caption or ""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–º–æ—â—å—é GPT Vision
        analysis_result = await analyze_photo_with_gpt(image_bytes, caption)
        
        await update.message.reply_text(f"üîç **–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:**\n\n{analysis_result}")
        
        # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç Assistant
        context_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {analysis_result}"
        if caption:
            context_message += f"\n–ü–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ: {caption}"
        
        await ask_assistant(context_message, chat_id)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏, –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ."
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    chat_id = update.effective_chat.id
    state = user_state.get(chat_id)

    if state == "AWAIT_NEXT" and text == "–î–∞–ª–µ–µ":
        user_state[chat_id] = "AWAIT_PET_TYPE"
        markup = ReplyKeyboardMarkup([["–ö–æ—à–∫–∞", "–°–æ–±–∞–∫–∞", "–û–±–∞"]], resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–ö—Ç–æ —É —Ç–µ–±—è –¥–æ–º–∞?", reply_markup=markup)

    elif state == "AWAIT_PET_TYPE":
        user_data[chat_id] = {"pet_type": text}
        user_state[chat_id] = "AWAIT_PET_INFO"
        await update.message.reply_text(
            "–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø–∏—Ç–æ–º—Ü–µ:\n1. –ò–º—è:\n2. –ü–æ—Ä–æ–¥–∞:\n3. –í–æ–∑—Ä–∞—Å—Ç:\n4. –í–µ—Å:\n5. –ü–æ–ª:",
            reply_markup=ReplyKeyboardRemove()
        )

    elif state == "AWAIT_PET_INFO":
        user_data[chat_id]["pet_info"] = text
        user_state[chat_id] = "AWAIT_HELP_AREA"
        markup = ReplyKeyboardMarkup([
            ["–£—Ö–æ–¥ –∏ –ø–∏—Ç–∞–Ω–∏–µ", "–ü–æ–≤–µ–¥–µ–Ω–∏–µ –∏ –∑–¥–æ—Ä–æ–≤—å–µ"],
            ["–ò–≥—Ä—ã –∏ –¥–æ—Å—É–≥", "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"],
        ], resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–í —á—ë–º —Ç–µ–±–µ –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ –º–æ—è –ø–æ–º–æ—â—å?", reply_markup=markup)

    elif state == "AWAIT_HELP_AREA":
        user_data[chat_id]["help_area"] = text
        user_state[chat_id] = "DONE"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Assistant
        user_context = f"""
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:
        - –¢–∏–ø –ø–∏—Ç–æ–º—Ü–∞: {user_data[chat_id].get('pet_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
        - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—Ç–æ–º—Ü–µ: {user_data[chat_id].get('pet_info', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
        - –ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∞—è –æ–±–ª–∞—Å—Ç—å –ø–æ–º–æ—â–∏: {user_data[chat_id].get('help_area', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
        
        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—á–∏—Ç—ã–≤–∞–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –æ—Ç–≤–µ—Ç–∞—Ö –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        
        await ask_assistant(user_context, chat_id)
        
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ, –≤—Å—ë –≥–æ—Ç–æ–≤–æ! –ú–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø–∏—Ç–æ–º—Ü–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n- –ö–∞–∫ –ø—Ä–∏—É—á–∏—Ç—å —â–µ–Ω–∫–∞ –∫ —Ç—É–∞–ª–µ—Ç—É?\n- –ß–µ–º –∫–æ—Ä–º–∏—Ç—å —â–µ–Ω–∫–∞ —Ö–∞—Å–∫–∏?\n- üì∏ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –ø–∏—Ç–æ–º—Ü–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
            reply_markup=ReplyKeyboardRemove()
        )

    elif state == "DONE":
        await update.message.reply_text("–°–µ–∫—É–Ω–¥—É, –¥—É–º–∞—é‚Ä¶")
        reply = await ask_assistant(text, chat_id)
        await update.message.reply_text(reply)

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    app.run_polling()

if __name__ == "__main__":
    main()
