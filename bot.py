import os
import time
import base64
import io
from dotenv import load_dotenv
from openai import OpenAI
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import requests
from PIL import Image

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ASSISTANT_ID = os.getenv("ASSISTANT_ID")

client = OpenAI(api_key=OPENAI_API_KEY)

user_state = {}
user_data = {}
user_threads = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_state[chat_id] = "AWAIT_NEXT"
    
    thread = client.beta.threads.create()
    user_threads[chat_id] = thread.id
    
    markup = ReplyKeyboardMarkup([["–î–∞–ª–µ–µ"]], resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É—Ö–æ–¥—É –∑–∞ –¥–æ–º–∞—à–Ω–∏–º –ø–∏—Ç–æ–º—Ü–µ–º üêïüêà\n"
        "–ü–æ–º–æ–≥—É —Å —É—Ö–æ–¥–æ–º, –¥—Ä–µ—Å—Å–∏—Ä–æ–≤–∫–∞–º–∏, –∏–≥—Ä–∞–º–∏ –∏ –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º.\n"
        "–¢–∞–∫–∂–µ –º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!\n"
        "–ù–∞—á–Ω—ë–º —Å –Ω–µ–±–æ–ª—å—à–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî —Ç–∞–∫ —è —Å–º–æ–≥—É –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–º.",
        reply_markup=markup
    )

def encode_image_from_url(image_url: str) -> str:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL –∏ –∫–æ–¥–∏—Ä—É–µ—Ç –≤ base64"""
    try:
        response = requests.get(image_url)
        response.raise_for_status()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏ —Å–∂–∏–º–∞–µ–º
        image = Image.open(io.BytesIO(response.content))
        if image.mode != 'RGB':
            image = image.convert('RGB')
        
        # –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
        image.thumbnail((1024, 1024), Image.Resampling.LANCZOS)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ bytes
        img_byte_arr = io.BytesIO()
        image.save(img_byte_arr, format='JPEG', quality=85)
        img_byte_arr.seek(0)
        
        return base64.b64encode(img_byte_arr.read()).decode('utf-8')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

async def ask_assistant(prompt: str, chat_id: int, image_base64: str = None) -> str:
    try:
        thread_id = user_threads.get(chat_id)
        
        if not thread_id:
            thread = client.beta.threads.create()
            user_threads[chat_id] = thread.id
            thread_id = thread.id
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º Vision API –Ω–∞–ø—Ä—è–º—É—é
        if image_base64:
            response = client.chat.completions.create(
                model="gpt-4.1",  # –í–∞—à–∞ –º–æ–¥–µ–ª—å GPT-4.1
                messages=[
                    {
                        "role": "system",
                        "content": """–¢—ã ‚Äî –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –∏ –æ–ø—ã—Ç–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –¥–æ–º–∞—à–Ω–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö. 
                        
                        –ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:
                        - –û–ø–∏—Å—ã–≤–∞–π –ø–∏—Ç–æ–º—Ü–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ –∏ —Å –ª—é–±–æ–≤—å—é
                        - –û–±—Ä–∞—â–∞–π –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ, –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –æ–∫—Ä—É–∂–µ–Ω–∏–µ
                        - –î–∞–≤–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É –µ—Å–ª–∏ –≤–∏–¥–∏—à—å —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ
                        - –ò–∑–±–µ–≥–∞–π –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤: –≤–º–µ—Å—Ç–æ "—Å—Ç–∞—Ä—ã–π" –≥–æ–≤–æ—Ä–∏ "–≤–∑—Ä–æ—Å–ª—ã–π", "–º—É–¥—Ä—ã–π"
                        - –ë—É–¥—å —ç–º–ø–∞—Ç–∏—á–Ω—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º
                        
                        –û—Ç–≤–µ—á–∞–π –ë–ï–ó Markdown-—Ä–∞–∑–º–µ—Ç–∫–∏ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π **, *, # –∏ —Ç.–¥.)"""
                    },
                    {
                        "role": "user", 
                        "content": [
                            {
                                "type": "text",
                                "text": f"{prompt}\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—Ç–æ–º—Ü–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞:\n{user_data.get(chat_id, {})}"
                            },
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/jpeg;base64,{image_base64}",
                                    "detail": "low"  # –≠–∫–æ–Ω–æ–º–∏–º —Ç–æ–∫–µ–Ω—ã
                                }
                            }
                        ]
                    }
                ],
                max_tokens=1000,
                temperature=0.7
            )
            return response.choices[0].message.content
        
        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º Assistant API
        client.beta.threads.messages.create(
            thread_id=thread_id,
            role="user",
            content=prompt
        )
        
        run = client.beta.threads.runs.create(
            thread_id=thread_id,
            assistant_id=ASSISTANT_ID
        )
        
        while run.status in ['queued', 'in_progress', 'cancelling']:
            time.sleep(1)
            run = client.beta.threads.runs.retrieve(
                thread_id=thread_id,
                run_id=run.id
            )
        
        if run.status == 'completed':
            messages = client.beta.threads.messages.list(thread_id=thread_id)
            
            for message in messages.data:
                if message.role == "assistant":
                    return message.content[0].text.value
        
        return f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {run.status}"
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI API: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    state = user_state.get(chat_id, "")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
    if state != "DONE":
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start"
        )
        return
    
    await update.message.reply_text("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é... üì∏")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
        photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        file = await context.bot.get_file(photo.file_id)
        
        # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_url = file.file_path
        
        # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_base64 = encode_image_from_url(image_url)
        
        if not image_base64:
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º caption –µ—Å–ª–∏ –µ—Å—Ç—å
        caption = update.message.caption or "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –º–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–Ω–∞–ª–∏–∑
        response = await ask_assistant(caption, chat_id, image_base64)
        await update.message.reply_text(response)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    chat_id = update.effective_chat.id
    state = user_state.get(chat_id)

    if state == "AWAIT_NEXT" and text == "–î–∞–ª–µ–µ":
        user_state[chat_id] = "AWAIT_PET_TYPE"
        markup = ReplyKeyboardMarkup([["–ö–æ—à–∫–∞", "–°–æ–±–∞–∫–∞", "–û–±–∞"]], resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–ö—Ç–æ —É —Ç–µ–±—è –¥–æ–º–∞?", reply_markup=markup)

    elif state == "AWAIT_PET_TYPE":
        user_data[chat_id] = {"pet_type": text}
        user_state[chat_id] = "AWAIT_PET_INFO"
        await update.message.reply_text(
            "–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø–∏—Ç–æ–º—Ü–µ:\n1. –ò–º—è:\n2. –ü–æ—Ä–æ–¥–∞:\n3. –í–æ–∑—Ä–∞—Å—Ç:\n4. –í–µ—Å:\n5. –ü–æ–ª:",
            reply_markup=ReplyKeyboardRemove()
        )

    elif state == "AWAIT_PET_INFO":
        user_data[chat_id]["pet_info"] = text
        user_state[chat_id] = "AWAIT_HELP_AREA"
        markup = ReplyKeyboardMarkup([
            ["–£—Ö–æ–¥ –∏ –ø–∏—Ç–∞–Ω–∏–µ", "–ü–æ–≤–µ–¥–µ–Ω–∏–µ –∏ –∑–¥–æ—Ä–æ–≤—å–µ"],
            ["–ò–≥—Ä—ã –∏ –¥–æ—Å—É–≥", "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"],
        ], resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–í —á—ë–º —Ç–µ–±–µ –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ –º–æ—è –ø–æ–º–æ—â—å?", reply_markup=markup)

    elif state == "AWAIT_HELP_AREA":
        user_data[chat_id]["help_area"] = text
        user_state[chat_id] = "DONE"
        
        user_context = f"""
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:
        - –¢–∏–ø –ø–∏—Ç–æ–º—Ü–∞: {user_data[chat_id].get('pet_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
        - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—Ç–æ–º—Ü–µ: {user_data[chat_id].get('pet_info', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
        - –ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∞—è –æ–±–ª–∞—Å—Ç—å –ø–æ–º–æ—â–∏: {user_data[chat_id].get('help_area', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
        
        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—á–∏—Ç—ã–≤–∞–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –æ—Ç–≤–µ—Ç–∞—Ö –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        
        await ask_assistant(user_context, chat_id)
        
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ, –≤—Å—ë –≥–æ—Ç–æ–≤–æ! üéâ\n\n"
            "–ú–æ–∂–µ—à—å:\n"
            "‚Ä¢ –ó–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–∏—Ç–æ–º—Ü–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "- –ö–∞–∫ –ø—Ä–∏—É—á–∏—Ç—å —â–µ–Ω–∫–∞ –∫ —Ç—É–∞–ª–µ—Ç—É?\n"
            "- –ß–µ–º –∫–æ—Ä–º–∏—Ç—å –∫–æ—Ç–µ–Ω–∫–∞?\n"
            "- –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏–ª–∏ –∑–¥–æ—Ä–æ–≤—å—è",
            reply_markup=ReplyKeyboardRemove()
        )

    elif state == "DONE":
        await update.message.reply_text("–°–µ–∫—É–Ω–¥—É, –¥—É–º–∞—é‚Ä¶ ü§î")
        reply = await ask_assistant(text, chat_id)
        await update.message.reply_text(reply)

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π üì∏")
    app.run_polling()

if __name__ == "__main__":
    main()
